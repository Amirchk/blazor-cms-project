@page "/content/create"
@page "/content/edit/{id:int}"
@layout AdminLayout
@using CMSProject.Core.Entities
@using CMSProject.Core.Interfaces
@inject IContentRepository ContentRepository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ICategoryRepository CategoryRepository

<PageTitle>@(Id.HasValue ? "Edit Content" : "Create Content") - Blazor CMS</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@(Id.HasValue ? "Edit Content" : "Create New Content")</MudText>

<MudPaper Class="pa-4" Elevation="2">
    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
    <MudItem xs="12" md="9">
        <MudTextField @bind-Value="content.Title" Label="Title" Required="true" RequiredError="Title is required" />
    </MudItem>
    <MudItem xs="12" md="3">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true" 
                   OnClick="GenerateSlug" StartIcon="@Icons.Material.Filled.Link" Class="mt-1">
            Generate Slug
        </MudButton>
    </MudItem>
</MudGrid>
        
        <MudTextField @bind-Value="content.Slug" Label="Slug" 
              HelperText="URL-friendly version of title" 
              Required="true" 
              Counter="100" MaxLength="100"
              Class="mt-4" />
        
        <MudTextField @bind-Value="content.Summary" Label="Summary" Lines="3" 
                      HelperText="Brief description of the content" Class="mt-4" />
        
<div class="mt-4">
    <MudText Typo="Typo.body1" Class="mb-2">Content Body *</MudText>
    <RichTextEditor @bind-Value="content.Body" />
    @if (string.IsNullOrEmpty(content.Body))
    {
        <MudText Typo="Typo.caption" Color="Color.Error">Content body is required</MudText>
    }
</div>
        <MudSelect @bind-Value="content.CategoryId" Label="Category" Class="mt-4" Clearable="true">
    <MudSelectItem Value="@((int?)null)">-- No Category --</MudSelectItem>
    @foreach (var cat in categories)
    {
        <MudSelectItem Value="@((int?)cat.Id)">@cat.Name</MudSelectItem>
    }
</MudSelect>
        <MudSelect @bind-Value="content.Status" Label="Status" Required="true" Class="mt-4">
            <MudSelectItem Value="@ContentStatus.Draft">Draft</MudSelectItem>
            <MudSelectItem Value="@ContentStatus.Published">Published</MudSelectItem>
            <MudSelectItem Value="@ContentStatus.Archived">Archived</MudSelectItem>
        </MudSelect>
        
        <MudTextField @bind-Value="content.MetaTitle" Label="Meta Title" 
              HelperText="SEO title (recommended: 50-60 characters)" 
              Counter="60" MaxLength="60"
              Class="mt-4" />
        
        <MudTextField @bind-Value="content.MetaDescription" Label="Meta Description" Lines="2"
              HelperText="SEO description (recommended: 150-160 characters)" 
              Counter="160" MaxLength="160"
              Class="mt-4" />
        
        <div class="d-flex justify-space-between mt-6">
            <MudButton Variant="Variant.Filled" Color="Color.Default" 
                       OnClick="@(() => Navigation.NavigateTo("/content"))">
                Cancel
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                       Disabled="@(!success)" OnClick="SaveContent">
                @(Id.HasValue ? "Update" : "Create")
            </MudButton>
        </div>
    </MudForm>
</MudPaper>
@code {
    [Parameter]
    public int? Id { get; set; }
    private List<Category> categories = new();
    private Content content = new() { Status = ContentStatus.Draft };
    private MudForm? form;
    private bool success;

protected override async Task OnInitializedAsync()
{
    // Load categories for dropdown
    var cats = await CategoryRepository.GetAllAsync();
    categories = cats.ToList();

    if (Id.HasValue)
    {
        var existingContent = await ContentRepository.GetByIdAsync(Id.Value);
        if (existingContent != null)
        {
            content = existingContent;
        }
        else
        {
            Navigation.NavigateTo("/content");
        }
    }
}

    private async Task SaveContent()
    {
        if (form != null)
        {
            await form.Validate();
        }
        
        if (!success) return;

        try
        {
            // Set author ID (hardcoded for now, will use real user later)
            content.AuthorId = "system";

            if (Id.HasValue)
            {
                await ContentRepository.UpdateAsync(content);
                Snackbar.Add("Content updated successfully!", Severity.Success);
            }
            else
            {
                if (content.Status == ContentStatus.Published)
                {
                    content.PublishedDate = DateTime.Now;
                }
                await ContentRepository.CreateAsync(content);
                Snackbar.Add("Content created successfully!", Severity.Success);
            }

            Navigation.NavigateTo("/content");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

private void GenerateSlug()
{
    if (string.IsNullOrEmpty(content.Title))
        return;

    // Convert to lowercase
    var slug = content.Title.ToLower();

    // Replace spaces with hyphens
    slug = slug.Replace(" ", "-");

    // Remove special characters
    slug = System.Text.RegularExpressions.Regex.Replace(slug, @"[^a-z0-9\-]", "");

    // Remove multiple hyphens
    slug = System.Text.RegularExpressions.Regex.Replace(slug, @"-+", "-");

    // Trim hyphens from start and end
    slug = slug.Trim('-');

    content.Slug = slug;
}

}