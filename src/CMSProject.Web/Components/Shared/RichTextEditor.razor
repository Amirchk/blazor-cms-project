@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div>
    <div @ref="quillElement" style="height: 400px;"></div>
</div>

@code {
    private ElementReference quillElement;
    private DotNetObjectReference<RichTextEditor>? dotNetHelper;
    private IJSObjectReference? quillModule;

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            
            try
            {
                quillModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "quillInterop.createQuill", quillElement, dotNetHelper);

                if (!string.IsNullOrEmpty(Value))
                {
                    await JSRuntime.InvokeVoidAsync("quillInterop.setContent", quillElement, Value);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Quill: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public async Task UpdateContent(string content)
    {
        Value = content;
        await ValueChanged.InvokeAsync(content);
    }

    public async ValueTask DisposeAsync()
    {
        if (quillModule != null)
        {
            await quillModule.DisposeAsync();
        }
        dotNetHelper?.Dispose();
    }
}